// Generated by gencpp from file my_package/WaypointDistanceResponse.msg
// DO NOT EDIT!


#ifndef MY_PACKAGE_MESSAGE_WAYPOINTDISTANCERESPONSE_H
#define MY_PACKAGE_MESSAGE_WAYPOINTDISTANCERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_package
{
template <class ContainerAllocator>
struct WaypointDistanceResponse_
{
  typedef WaypointDistanceResponse_<ContainerAllocator> Type;

  WaypointDistanceResponse_()
    : robot_id(0)
    , waypoint_id(0)
    , distance(0.0)  {
    }
  WaypointDistanceResponse_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , waypoint_id(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _waypoint_id_type;
  _waypoint_id_type waypoint_id;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::my_package::WaypointDistanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_package::WaypointDistanceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointDistanceResponse_

typedef ::my_package::WaypointDistanceResponse_<std::allocator<void> > WaypointDistanceResponse;

typedef boost::shared_ptr< ::my_package::WaypointDistanceResponse > WaypointDistanceResponsePtr;
typedef boost::shared_ptr< ::my_package::WaypointDistanceResponse const> WaypointDistanceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_package::WaypointDistanceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_package::WaypointDistanceResponse_<ContainerAllocator1> & lhs, const ::my_package::WaypointDistanceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.waypoint_id == rhs.waypoint_id &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_package::WaypointDistanceResponse_<ContainerAllocator1> & lhs, const ::my_package::WaypointDistanceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_package::WaypointDistanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::WaypointDistanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::WaypointDistanceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29d251301658634b82c36b56fb83e302";
  }

  static const char* value(const ::my_package::WaypointDistanceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29d251301658634bULL;
  static const uint64_t static_value2 = 0x82c36b56fb83e302ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_package/WaypointDistanceResponse";
  }

  static const char* value(const ::my_package::WaypointDistanceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8       robot_id\n"
"uint8       waypoint_id\n"
"float32     distance\n"
;
  }

  static const char* value(const ::my_package::WaypointDistanceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.waypoint_id);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointDistanceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_package::WaypointDistanceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_package::WaypointDistanceResponse_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "waypoint_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waypoint_id);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PACKAGE_MESSAGE_WAYPOINTDISTANCERESPONSE_H
